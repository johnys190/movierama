{"version":3,"sources":["constants/Constants.js","utils/APIClient.js","utils/Colors.js","movie/Movie.js","utils/Helpers.js","common/LoadIndicator.js","movie/MovieList.js","movie/NewMovie.js","user/login/Login.js","user/signup/SignUp.js","common/NotFound.js","common/ServerError.js","user/profile/Profile.js","common/AppHeader.js","common/PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["API_BASE_URL","request","options","headers","Headers","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","getAllMovies","page","size","method","getAllMoviesOrderedByLikes","getAllMoviesOrderedByHates","getMoviesCreatedByUser","username","getOpinions","colors","getAvatarColor","name","substr","hash","i","length","charCodeAt","index","Math","abs","RadioGroup","Radio","Group","Movie","isSelected","choice","props","movie","selectedChoice","isVoteable","this","currentUsername","createdBy","className","to","style","backgroundColor","toUpperCase","dateTimeString","date","Date","monthIndex","getMonth","year","getFullYear","minuteValue","getMinutes","getDate","getHours","getSeconds","formatDateTime","creationDateTime","title","description","onChange","handleVoteChange","value","currentVote","key","disabled","onClick","handleVoteSubmit","totalLikes","LikeOutlined","totalhates","DislikeOutlined","handleClearVote","Component","LoadIndicator","tip","MovieList","state","movies","totalElements","totalPages","last","currentVotes","isLoading","order","loadMovieList","bind","handleLoadMore","handleLikeOrdering","handleHateOrdering","handleDateOrdering","refreshTheOrder","promise","type","setState","slice","content","concat","Array","fill","catch","error","nextProps","isAuthenticated","loadLikeOrdering","loadHateOrdering","event","movieIndex","target","preventDefault","history","push","notification","info","message","opinionData","opinionRequest","opinionText","opinion","movieId","body","JSON","stringify","expressOpinion","id","status","handleLogout","isProfileMovieList","handleTotalMovieOpinions","currentUser","console","log","splice","movieViews","forEach","orderingChoices","likeOrderButton","hateOrderButton","dateOrderButton","CalendarOutlined","PlusOutlined","withRouter","FormItem","Form","Item","TextArea","Input","NewMovie","validateDescription","descriptionText","validateStatus","errorMsg","validateTitle","titleText","text","handleSubmit","handleDescriptionChange","handleTitleChange","isFormInvalid","movieData","createMovie","success","onSubmit","help","placeholder","fontSize","autosize","minRows","maxRows","htmlType","Login","AntWrappedLoginForm","create","LoginForm","onLogin","form","validateFields","err","values","loginRequest","login","setItem","accessToken","getFieldDecorator","rules","required","prefix","UserOutlined","LockOutlined","SignUp","validateName","validationStatus","validateEmail","email","RegExp","test","validateUsername","validatePassword","password","handleInputChange","validateUsernameAvailability","validateEmailAvailability","validationFun","inputName","inputValue","signupRequest","signup","label","autoComplete","hasFeedback","onBlur","usernameValue","usernameValidation","available","emailValue","emailValidation","NotFound","ServerError","TabPane","Tabs","Profile","data","user","userValue","totalMovieOpinions","loadUserProfile","getUserProfile","notFound","serverError","match","params","defaultActiveKey","animated","tabBarStyle","textAlign","tab","totalCreatedMovies","Header","Layout","AppHeader","handleMenuClick","onLogout","menuItems","PlusCircleFilled","HomeFilled","ProfileDropdownMenu","mode","selectedKeys","location","pathname","lineHeight","dropdownMenu","Divider","overlay","trigger","getPopupContainer","document","getElementsByClassName","marginRight","DownOutlined","PrivateRoute","component","authenticated","rest","render","from","Content","App","loadCurrentUser","handleLogin","config","placement","top","duration","redirectTo","notificationType","removeItem","exact","path","Signup","Boolean","window","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93eda3a7.chunk.js","sourcesContent":["export const API_BASE_URL = 'http://localhost:8080/movierama';\n\nexport const ACCESS_TOKEN = 'accessToken';\n\nexport const MOVIES_LIST_SIZE = 5;\n\nexport const NAME_MIN_LENGTH = 4;\nexport const NAME_MAX_LENGTH = 40;\n\nexport const USERNAME_MIN_LENGTH = 3;\nexport const USERNAME_MAX_LENGTH = 15;\n\nexport const EMAIL_MAX_LENGTH = 40;\n\nexport const PASSWORD_MIN_LENGTH = 6;\nexport const PASSWORD_MAX_LENGTH = 20;\n\nexport const MOVIE_DESCRIPTION_MAX_LENGTH = 400;\nexport const MOVIE_TITLE_MAX_LENGTH = 100;\n\nexport const APPLICATION_NAME = 'Movierama';\nexport const SUCCESSFULL_LOGIN = \"You're successfully logged in.\";\nexport const SUCCESSFULL_LOGOUT = \"You're successfully logged out.\";\n\nexport const NOT_FOUND_PAGE_MESSAGE = 'The Page you are looking for was not found';\nexport const NOT_FOUND_PAGE_CODE = 400;\nexport const SERVER_ERROR_PAGE_MESSAGE = 'Oops! Something went wrong at our Server.';\nexport const SERVER_ERROR_PAGE_CODE = 500;\nexport const LOGIN_AUTHORIZATION_ERROR_MESSAGE = 'Your Username or Password is incorrect. Please try again!';\nexport const LOGIN_GENERAL_ERROR = 'Sorry! Something went wrong. Please try again!';\nexport const AUTH_SIGN_IN_URL = \"/auth/signin\";\nexport const AUTH_SIGN_UP_URL = \"/auth/signup\";\n\nexport const USERS_URL = \"/users/\";\nexport const MOVIES_URL = \"/movies/\";\nexport const CHECK_USERNAME_AVAILABILITY_URL = \"/users/checkUsernameAvailability?username=\";\nexport const CHECK_EMAIL_AVAILABILITY_URL = \"/users/checkEmailAvailability?email=\"\nexport const CURRENT_USER_URL = \"/oauth2/userInfo\";\nexport const ADD_MOVIE_URL = \"/movies\";\nexport const CLEAR_OPINION_URL = \"/opinion/clear\";\nexport const OPINION_URL = \"/opinion\";\nexport const PREFIX_GET_MOVIES_URL = \"/movies?page=\";\nexport const PREFIX_GET_MOVIES_ORDERED_BY_LIKE_URL = \"/movies/ordered/like?page=\";\nexport const PREFIX_GET_MOVIES_ORDERED_BY_HATE_URL = \"/movies/ordered/hate?page=\";\nexport const GET_MOVIES_OPINIONS_URL = \"/movies/opinions?page=\";\nexport const SIZE_PARAMETER = \"&size=\";","import { \n    API_BASE_URL,\n    ACCESS_TOKEN,\n    MOVIES_LIST_SIZE,\n    AUTH_SIGN_IN_URL,\n    AUTH_SIGN_UP_URL, \n    CHECK_USERNAME_AVAILABILITY_URL,\n    CHECK_EMAIL_AVAILABILITY_URL,\n    CURRENT_USER_URL,\n    USERS_URL,\n    ADD_MOVIE_URL,\n    MOVIES_URL,\n    CLEAR_OPINION_URL,\n    PREFIX_GET_MOVIES_URL,\n    OPINION_URL,\n    PREFIX_GET_MOVIES_ORDERED_BY_LIKE_URL,\n    PREFIX_GET_MOVIES_ORDERED_BY_HATE_URL,\n    GET_MOVIES_OPINIONS_URL,\n    SIZE_PARAMETER,\n} from '../constants/Constants';\n\nconst request = (options) => {\n    const headers = new Headers({\n        'Content-Type': 'application/json',\n    })\n    \n    if(localStorage.getItem(ACCESS_TOKEN)) {\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\n    }\n\n    const defaults = {headers: headers};\n    options = Object.assign({}, defaults, options);\n\n    return fetch(options.url, options)\n    .then(response => \n        response.json().then(json => {\n            if(!response.ok) {\n                return Promise.reject(json);\n            }\n            return json;\n        })\n    );\n};\n\nexport function login(loginRequest) {\n    return request({\n        url: API_BASE_URL + AUTH_SIGN_IN_URL,\n        method: 'POST',\n        body: JSON.stringify(loginRequest)\n    });\n}\n\nexport function signup(signupRequest) {\n    return request({\n        url: API_BASE_URL + AUTH_SIGN_UP_URL,\n        method: 'POST',\n        body: JSON.stringify(signupRequest)\n    });\n}\n\nexport function checkUsernameAvailability(username) {\n    return request({\n        url: API_BASE_URL + CHECK_USERNAME_AVAILABILITY_URL + username,\n        method: 'GET'\n    });\n}\n\nexport function checkEmailAvailability(email) {\n    return request({\n        url: API_BASE_URL + CHECK_EMAIL_AVAILABILITY_URL + email,\n        method: 'GET'\n    });\n}\n\nexport function getCurrentUser() {\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\n        return Promise.reject(\"No access token set.\");\n    }\n\n    return request({\n        url: API_BASE_URL + CURRENT_USER_URL,\n        method: 'GET'\n    });\n}\n\nexport function getUserProfile(username) {\n    return request({\n        url: API_BASE_URL + USERS_URL + username,\n        method: 'GET'\n    });\n}\n\nexport function createMovie(username, movieData) {\n    return request({\n        url: API_BASE_URL + USERS_URL + username + ADD_MOVIE_URL,\n        method: 'POST',\n        body: JSON.stringify(movieData)         \n    });\n}\n\nexport function getAllMovies(page, size) {\n    page = page || 0;\n    size = size || MOVIES_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + PREFIX_GET_MOVIES_URL + page + SIZE_PARAMETER + size,\n        method: 'GET'\n    });\n}\n\nexport function getAllMoviesOrderedByLikes(page, size) {\n    page = page || 0;\n    size = size || MOVIES_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + PREFIX_GET_MOVIES_ORDERED_BY_LIKE_URL + page + SIZE_PARAMETER + size,\n        method: 'GET'\n    });\n}\n\nexport function getAllMoviesOrderedByHates(page, size) {\n    page = page || 0;\n    size = size || MOVIES_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + PREFIX_GET_MOVIES_ORDERED_BY_HATE_URL + page + SIZE_PARAMETER + size,\n        method: 'GET'\n    });\n}\n\nexport function getMoviesCreatedByUser(username, page, size) {\n    page = page || 0;\n    size = size || MOVIES_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + USERS_URL + username + PREFIX_GET_MOVIES_URL + page + SIZE_PARAMETER + size,\n        method: 'GET'\n    });\n}\n\nexport function getOpinions(username, page, size) {\n    page = page || 0;\n    size = size || MOVIES_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + USERS_URL + username + GET_MOVIES_OPINIONS_URL + page + SIZE_PARAMETER + size,\n        method: 'GET'\n    });\n}\n\nexport function expressOpinion(opinionData) {\n    const opinionRequest = {\n        opinionText : opinionData.opinion\n    };\n    return request({\n        url: API_BASE_URL + MOVIES_URL + opinionData.movieId + OPINION_URL,\n        method: 'POST',\n        body: JSON.stringify(opinionRequest)\n    });\n}\n\nexport function clearOpinion(movieId) {\n    return request({\n        url: API_BASE_URL + MOVIES_URL + movieId + CLEAR_OPINION_URL,\n        method: 'POST',\n    });\n}","const colors = [\n    '#F44336', '#e91e63', '#9c27b0', '#673ab7',\n    '#ff9800', '#ff5722', '#795548', '#607d8b',\n    '#3f51b5', '#2196F3', '#00bcd4', '#009688',\n    '#2196F3', '#32c787', '#00BCD4', '#ff5652',\n    '#ffc107', '#ff85af', '#FF9800', '#39bbb0',\n    '#4CAF50', '#ffeb3b', '#ffc107',\n];\n\nexport function getAvatarColor(name) {\n    name = name.substr(0, 6);\n\n    var hash = 0;\n    for (var i = 0; i < name.length; i++) {\n        hash = 31 * hash + name.charCodeAt(i);\n    }\n    var index = Math.abs(hash % colors.length);\n    return colors[index];\n}","import React, { Component } from 'react';\nimport './Movie.css';\nimport { Avatar } from 'antd';\nimport { Link } from 'react-router-dom';\nimport {LikeOutlined, DislikeOutlined, CalendarOutlined, PlusOutlined} from '@ant-design/icons';\nimport { getAvatarColor } from '../utils/Colors';\nimport { formatDateTime } from '../utils/Helpers';\n\nimport { Radio, Button } from 'antd';\nconst RadioGroup = Radio.Group;\n\nclass Movie extends Component {\n    \n\n    isSelected = (choice) => {\n        return this.props.movie.selectedChoice === choice;\n    }\n\n    render() {\n        \n        let isVoteable = true;\n        if(this.props.currentUsername){\n            isVoteable = this.props.currentUsername === this.props.movie.createdBy.username;\n        }\n\n        return (\n            <div className=\"movie-content\">\n                <div className=\"movie-header\">\n                    <div className=\"movie-creator-info\">\n                        <Link className=\"creator-link\" to={`/users/${this.props.movie.createdBy.username}`}>\n                            <Avatar className=\"movie-creator-avatar\" \n                                style={{ backgroundColor: getAvatarColor(this.props.movie.createdBy.username)}} >\n                                {this.props.movie.createdBy.name[0].toUpperCase()}\n                            </Avatar>\n                            <span className=\"movie-creator-username\">\n                                Posted by: @{this.props.movie.createdBy.username}\n                            </span>\n                            <span className=\"movie-creation-date\">\n                                Created at: {formatDateTime(this.props.movie.creationDateTime)}\n                            </span>\n                        </Link>\n                    </div>\n                    <div className=\"movie-question\">\n                        {this.props.movie.title}\n                    </div>\n                    <div className=\"movie-question\">\n                        {this.props.movie.description}\n                    </div>\n                </div>\n\n                <div className=\"movie-choices\">\n                    {\n                        !isVoteable \n                        ? \n                        <RadioGroup \n                        className=\"movie-choice-radio-group\" \n                        onChange={this.props.handleVoteChange} \n                        value={this.props.currentVote}>\n                        <Radio className=\"movie-choice-radio\" key={'radio.likeId'} value={\"LIKE\"}>Like</Radio>\n                        <Radio className=\"movie-choice-radio\" key={'radio.hateId'} value={\"HATE\"}>Hate</Radio>\n                        </RadioGroup>\n                        :null\n                    }\n\n                </div>\n\n                <div className=\"movie-footer\">\n                \n                    {\n                        !isVoteable \n                        ?\n                        <Button className=\"vote-button\" disabled={!this.props.currentVote} onClick={this.props.handleVoteSubmit}>Vote</Button>\n                        :null\n\n                    }\n                    \n                    <span className=\"total-votes\">{this.props.movie.totalLikes} <LikeOutlined/></span>\n                    <span className=\"separator\"></span>\n                    <span className=\"total-votes\">{this.props.movie.totalhates} <DislikeOutlined/></span>\n                    {\n                        this.props.movie.selectedChoice \n                        ? <span className=\"separator\">| You have voted {`${this.props.movie.selectedChoice}`}.</span> \n                        :<span className=\"separator\"></span>\n                    }\n\n                    {\n                        this.props.movie.selectedChoice \n                        ? <Button className=\"clear-button\" disabled={!this.props.movie.selectedChoice } onClick={this.props.handleClearVote}>Clear</Button>\n                        :null\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Movie;","\nexport function formatDate(dateString) {\n    const date = new Date(dateString);\n\n    const monthNames = [\n      \"January\", \"February\", \"March\",\n      \"April\", \"May\", \"June\", \"July\",\n      \"August\", \"September\", \"October\",\n      \"November\", \"December\"\n    ];\n  \n    const monthIndex = date.getMonth();\n    const year = date.getFullYear();\n  \n    return monthNames[monthIndex] + ' ' + year;\n}\n  \nexport function formatDateTime(dateTimeString) {\n  const date = new Date(dateTimeString);\n  const monthNames = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\",\n    \"May\", \"Jun\", \"Jul\", \"Aug\", \n    \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n  ];\n\n  const monthIndex = date.getMonth();\n  const year = date.getFullYear();\n\n  const minuteValue = (date.getMinutes() < 10 ) ? '0' + date.getMinutes() : date.getMinutes();\n  \n  return date.getDate() + ' ' + monthNames[monthIndex] + ' ' + year + ' - ' + date.getHours() + ':' + minuteValue + ':' + date.getSeconds();\n}  ","import React from 'react';\nimport {Spin} from 'antd';\n\nexport default function LoadIndicator(props) {\n    return (\n        <Spin tip=\"Loading...\">\n        </Spin>\n    );\n}","import React, { Component } from 'react';\nimport { getAllMovies, getMoviesCreatedByUser, getOpinions, expressOpinion, clearOpinion, getAllMoviesOrderedByLikes, getAllMoviesOrderedByHates } from '../utils/APIClient';\nimport Movie from './Movie';\nimport LoadIndicator  from '../common/LoadIndicator';\nimport { Button, notification } from 'antd';\nimport {LikeOutlined, DislikeOutlined, CalendarOutlined, PlusOutlined} from '@ant-design/icons';\nimport { MOVIES_LIST_SIZE } from '../constants/Constants';\nimport { withRouter } from 'react-router-dom';\nimport './movieList.css';\nclass MovieList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            movies: [],\n            page: 0,\n            size: 10,\n            totalElements: 0,\n            totalPages: 0,\n            last: true,\n            currentVotes: [],\n            isLoading: false,\n            order: 'date'\n        };\n        this.loadMovieList = this.loadMovieList.bind(this);\n        this.handleLoadMore = this.handleLoadMore.bind(this);\n        this.handleLikeOrdering = this.handleLikeOrdering.bind(this);\n        this.handleHateOrdering = this.handleHateOrdering.bind(this);\n        this.handleDateOrdering = this.handleDateOrdering.bind(this);\n\n        this.refreshTheOrder = this.refreshTheOrder.bind(this);\n    }\n\n    loadMovieList(page = 0, size = MOVIES_LIST_SIZE) {\n        let promise;\n        if(this.props.username) {\n             if(this.props.type === 'USER_CREATED_MOVIES') {\n                 promise = getMoviesCreatedByUser(this.props.username, page, size);\n             } else if (this.props.type === 'USER_OPINIONS') {\n                 promise = getOpinions(this.props.username, page, size);                               \n             }\n        } else {\n            promise = getAllMovies(page, size);\n        }\n\n        if(!promise) {\n            return;\n        }\n\n        this.setState({\n            isLoading: true\n        });\n\n        promise            \n        .then(response => {\n            const movies = this.state.movies.slice();\n            const currentVotes = this.state.currentVotes.slice();\n\n            this.setState({\n                movies: (page === 0) ? response.content : movies.concat(response.content),\n                page: response.page,\n                size: response.size,\n                totalElements: response.totalElements,\n                totalPages: response.totalPages,\n                last: response.last,\n                currentVotes: currentVotes.concat(Array(response.content.length).fill(null)),\n                isLoading: false,\n                order: 'date'\n            })\n        }).catch(error => {\n            this.setState({\n                isLoading: false\n            })\n        });  \n        \n    }\n\n    componentDidMount() {\n        this.loadMovieList();\n    }\n\n    componentDidUpdate(nextProps) {\n        if(this.props.isAuthenticated !== nextProps.isAuthenticated) {\n            // Reset State\n            this.setState({\n                movies: [],\n                page: 0,\n                size: 10,\n                totalElements: 0,\n                totalPages: 0,\n                last: true,\n                currentVotes: [],\n                isLoading: false,\n                order: 'date'\n            });    \n            this.loadMovieList();\n        }\n    }\n\n    handleLoadMore() {\n\n        if(this.state.order === 'date'){\n            this.loadMovieList(this.state.page + 1);\n        }\n        else if(this.state.order === 'like'){\n            this.loadLikeOrdering(this.state.page + 1);\n        }\n\n        else if(this.state.order === 'hate'){\n            this.loadHateOrdering(this.state.page + 1);\n        }\n    }\n\n    refreshTheOrder(){\n        if(this.state.order === 'date'){\n            this.loadMovieList();\n        }\n        else if(this.state.order === 'like'){\n            this.loadLikeOrdering();\n        }\n\n        else if(this.state.order === 'hate'){\n            this.loadHateOrdering();\n        }\n    }\n\n    handleVoteChange(event, movieIndex) {\n        const currentVotes = this.state.currentVotes.slice();\n        currentVotes[movieIndex] = event.target.value;\n\n        this.setState({\n            currentVotes: currentVotes\n        });\n    }\n\n\n    handleVoteSubmit(event, movieIndex) {\n        event.preventDefault();\n        \n        if(!this.props.isAuthenticated) {\n            this.props.history.push(\"/login\");\n            notification.info({\n                message: 'Movierama',\n                description: \"Please login to put an opinion.\",          \n            });\n            return;\n        }\n\n        const movie = this.state.movies[movieIndex];\n        const selectedChoice = this.state.currentVotes[movieIndex];\n\n        const opinionData = {\n            movieId: movie.id,\n            opinion: selectedChoice\n        };\n\n        expressOpinion(opinionData)\n        .then(response => {\n            const movies = this.state.movies.slice();\n            movies[movieIndex] = response;\n\n            this.setState({\n                movies: movies,\n                currentVotes: Array(movies.length).fill(null),\n            });\n\n            this.refreshTheOrder();\n\n        }).catch(error => {\n            if(error.status === 401) {\n                this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');    \n            } else {\n                notification.error({\n                    message: 'Movierama',\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\n                });                \n            }\n        });\n    }\n\n    handleClearVote(event, movieIndex) {\n        event.preventDefault();\n        if(!this.props.isAuthenticated) {\n            this.props.history.push(\"/login\");\n            notification.info({\n                message: 'Movierama',\n                description: \"Please login to put an opinion.\",          \n            });\n            return;\n        }\n\n        const movie = this.state.movies[movieIndex];\n        if(this.props.isProfileMovieList){\n            this.props.handleTotalMovieOpinions(this.props.currentUser.username);\n        }\n\n        clearOpinion(movie.id)\n        .then(response => {\n            const movies = this.state.movies.slice();\n            movies[movieIndex] = response;\n\n            console.log(this.props.isProfileMovieList);\n            console.log(movies[movieIndex].createdBy.username);\n            console.log(this.props);\n            console.log(this.state);\n                \n            if((this.props.isProfileMovieList) && ((movies[movieIndex].createdBy.username === this.props.currentUser.username) || (this.props.currentUser.username === this.props.username))){\n                \n                movies.splice(movieIndex, 1);\n\n            }\n\n            this.setState({\n                movies: movies,\n                currentVotes: Array(movies.length).fill(null),\n            });        \n        }).catch(error => {\n            if(error.status === 401) {\n                this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');    \n            } else {\n                notification.error({\n                    message: 'Movierama',\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\n                });                \n            }\n        });\n    }\n\n    handleLikeOrdering(){\n           this.loadLikeOrdering();\n    }\n\n    loadLikeOrdering(page = 0, size = MOVIES_LIST_SIZE){\n        let promise;\n        promise = getAllMoviesOrderedByLikes(page, size);\n\n        if(!promise) {\n            return;\n        }\n\n        this.setState({\n            isLoading: true\n        });\n\n        promise            \n        .then(response => {\n            const movies = this.state.movies.slice();\n            const currentVotes = this.state.currentVotes.slice();\n\n            this.setState({\n                movies: (page === 0) ? response.content : movies.concat(response.content),\n                page: response.page,\n                size: response.size,\n                totalElements: response.totalElements,\n                totalPages: response.totalPages,\n                last: response.last,\n                currentVotes: currentVotes.concat(Array(response.content.length).fill(null)),\n                isLoading: false,\n                order: 'like'\n            })\n        }).catch(error => {\n            this.setState({\n                isLoading: false\n            })\n        });   \n    }\n\n    handleHateOrdering(){\n        this.loadHateOrdering();\n    }\n\n    loadHateOrdering(page = 0, size = MOVIES_LIST_SIZE){\n        let promise = getAllMoviesOrderedByHates(page, size);\n    \n        if(!promise) {\n            return;\n        }\n\n        this.setState({\n            isLoading: true\n        });\n\n        promise            \n        .then(response => {\n            const movies = this.state.movies.slice();\n            const currentVotes = this.state.currentVotes.slice();\n\n            this.setState({\n                movies: (page === 0) ? response.content : movies.concat(response.content),\n                page: response.page,\n                size: response.size,\n                totalElements: response.totalElements,\n                totalPages: response.totalPages,\n                last: response.last,\n                currentVotes: currentVotes.concat(Array(response.content.length).fill(null)),\n                isLoading: false,\n                order: 'hate'\n            })\n        }).catch(error => {\n            this.setState({\n                isLoading: false\n            })\n        }); \n    }\n\n    handleDateOrdering(){\n        this.loadMovieList();\n    }\n\n    render() {\n        const movieViews = [];\n        this.state.movies.forEach((movie, movieIndex) => {\n            movieViews.push(<Movie \n                key={movie.id} \n                movie={movie}\n                currentVote={this.state.currentVotes[movieIndex]} \n                currentUsername={this.props.currentUser ? this.props.currentUser.username : null}\n                handleVoteChange={(event) => this.handleVoteChange(event, movieIndex)}\n                handleClearVote={(event) => this.handleClearVote(event, movieIndex)}\n                handleVoteSubmit={(event) => this.handleVoteSubmit(event, movieIndex)} />)            \n        });\n\n        const orderingChoices = [];\n        if(!this.props.isProfileMovieList){\n            let likeOrderButton = <Button key={\"likeOrderButtonKey\"} onClick={this.handleLikeOrdering} disabled={this.state.isLoading}>\n                    Order by likes<LikeOutlined/>\n                </Button>\n            let hateOrderButton =  <Button key={\"hateOrderButtonKey\"} onClick={this.handleHateOrdering} disabled={this.state.isLoading}>\n                    Order by hates<DislikeOutlined/>\n                </Button>\n            let dateOrderButton =  <Button key={\"dateOrderButtonKey\"} onClick={this.handleDateOrdering} disabled={this.state.isLoading}>\n                    Order by Date<CalendarOutlined/>\n                </Button>\n            orderingChoices.push(likeOrderButton);\n            orderingChoices.push(hateOrderButton);\n            orderingChoices.push(dateOrderButton)\n\n        }\n        return (\n            <div className=\"movies-container\">\n\n                {orderingChoices}\n                {movieViews}\n                {\n                    !this.state.isLoading && this.state.movies.length === 0 ? (\n                        <div className=\"no-movies-found\">\n                            <span>No Movies Found.</span>\n                        </div>    \n                    ): null\n                }  \n                {\n                    !this.state.isLoading && !this.state.last ? (\n                        <div className=\"load-more-movies\"> \n                            <Button type=\"dashed\" onClick={this.handleLoadMore} disabled={this.state.isLoading}>\n                                <PlusOutlined/> Load more\n                            </Button>\n                        </div>): null\n                }              \n                {\n                    this.state.isLoading ? \n                    <LoadIndicator />: null\n                }\n            </div>\n        );\n    }\n}\n\nexport default withRouter(MovieList);","import React, { Component } from 'react';\nimport { createMovie } from '../utils/APIClient';\nimport { MOVIE_TITLE_MAX_LENGTH, MOVIE_DESCRIPTION_MAX_LENGTH } from '../constants/Constants';\nimport './newMovie.css';  \nimport { Form, Input, Button, notification } from 'antd';\nconst FormItem = Form.Item;\nconst { TextArea } = Input;\n\nclass NewMovie extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            description: {\n                text: ''\n            },\n            title: {\n                text: ''\n            },\n        };\n        \n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleDescriptionChange = this.handleDescriptionChange.bind(this);\n        this.handleTitleChange = this.handleTitleChange.bind(this);\n        this.isFormInvalid = this.isFormInvalid.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const movieData = {\n            description: this.state.description.text,\n            title: this.state.title.text,\n        };\n\n        createMovie(this.props.currentUser.username, movieData)\n        .then(response => {\n            notification.success({\n                message: 'Movierama',\n                description: \"You successfully add a new movie.\",\n            });\n            this.props.history.push(\"/\");\n        }).catch(error => {\n            if(error.status === 401) {\n                this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create movie.');    \n            } else {\n                notification.error({\n                    message: 'Movierama',\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\n                });              \n            }\n        });\n    }\n\n    validateDescription = (descriptionText) => {\n        if(descriptionText.length === 0) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Please enter a description'\n            }\n        } else if (descriptionText.length > MOVIE_DESCRIPTION_MAX_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Description is too long. Only ${MOVIE_DESCRIPTION_MAX_LENGTH} characters allowed!`\n            }    \n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null\n            }\n        }\n    }\n\n    validateTitle = (titleText) => {\n        if(titleText.length === 0) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Please enter a title'\n            }\n        } else if (titleText.length > MOVIE_DESCRIPTION_MAX_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Title is too long. Only ${MOVIE_TITLE_MAX_LENGTH} characters allowed!`\n            }    \n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null\n            }\n        }\n    }\n\n    handleDescriptionChange(event) {\n        const value = event.target.value;\n        this.setState({\n            description: {\n                text: value,\n                ...this.validateDescription(value)\n            }\n        });\n    }\n\n    handleTitleChange(event) {\n        const value = event.target.value;\n        this.setState({\n            title: {\n                text: value,\n                ...this.validateTitle(value)\n            }\n        });\n    }\n\n    isFormInvalid() {\n        if(this.state.description.validateStatus !== 'success') {\n            return true;\n        }\n\n        if(this.state.title.validateStatus !== 'success') {\n            return true;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"new-movie-container\">\n                <h1 className=\"page-title\">Add a new Movie</h1>\n                <div className=\"new-movie-content\">\n                    <Form onSubmit={this.handleSubmit} className=\"create-movie-form\">\n                        <FormItem validateStatus={this.state.title.validateStatus}\n                            help={this.state.title.errorMsg} className=\"movie-form-row\">\n                            <TextArea \n                                placeholder=\"Enter your title\"\n                                style = {{ fontSize: '16px' }} \n                                autosize={{ minRows: 1, maxRows: 2 }} \n                                name = \"title\"\n                                value = {this.state.title.text}\n                                onChange = {this.handleTitleChange} />\n                        </FormItem>\n\n                        <FormItem validateStatus={this.state.description.validateStatus}\n                            help={this.state.description.errorMsg} className=\"movie-form-row\">\n                            <TextArea \n                                placeholder=\"Enter your description\"\n                                style = {{ fontSize: '16px' }} \n                                autosize={{ minRows: 4, maxRows: 8 }} \n                                name = \"description\"\n                                value = {this.state.description.text}\n                                onChange = {this.handleDescriptionChange} />\n                        </FormItem>\n\n                        <FormItem className=\"movie-form-row\">\n                            <Button type=\"primary\" \n                                htmlType=\"submit\" \n                                size=\"large\" \n                                disabled={this.isFormInvalid()}\n                                className=\"create-movie-form-button\">Create Movie</Button>\n                        </FormItem>\n                    </Form>\n                </div>    \n            </div>\n        );\n    }\n}\n\n\nexport default NewMovie;","import React, { Component } from 'react';\nimport { login } from '../../utils/APIClient';\nimport './login.css';\nimport { Link } from 'react-router-dom';\nimport { ACCESS_TOKEN, LOGIN_AUTHORIZATION_ERROR_MESSAGE, LOGIN_GENERAL_ERROR, APPLICATION_NAME } from '../../constants/Constants';\n\nimport { Form, Input, Button, notification } from 'antd';\nimport {LockOutlined, UserOutlined} from '@ant-design/icons';\nconst FormItem = Form.Item;\n\nclass Login extends Component {\n    render() {\n        const AntWrappedLoginForm = Form.create()(LoginForm)\n        return (\n            <div className=\"login-container\">\n                <h1 className=\"page-title\">Login</h1>\n                <div className=\"login-content\">\n                    <AntWrappedLoginForm onLogin={this.props.onLogin} />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass LoginForm extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();   \n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const loginRequest = Object.assign({}, values);\n                login(loginRequest)\n                .then(response => {\n                    localStorage.setItem(ACCESS_TOKEN, response.accessToken);\n                    this.props.onLogin();\n                }).catch(error => {\n                    if(error.status === 401) {\n                        notification.error({\n                            message: APPLICATION_NAME,\n                            description: LOGIN_AUTHORIZATION_ERROR_MESSAGE\n                        });                    \n                    } else {\n                        notification.error({\n                            message: APPLICATION_NAME,\n                            description: error.message || LOGIN_GENERAL_ERROR\n                        });                                            \n                    }\n                });\n            }\n        });\n    }\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <FormItem>\n                    {getFieldDecorator('usernameOrEmail', {\n                        rules: [{ required: true, message: 'Please input your email or username!' }],\n                    })(\n                    <Input \n                        prefix={<UserOutlined/>}\n                        size=\"large\"\n                        name=\"usernameOrEmail\" \n                        placeholder=\"Email or username\" />    \n                    )}\n                </FormItem>\n                <FormItem>\n                {getFieldDecorator('password', {\n                    rules: [{ required: true, message: 'Please input your Password!' }],\n                })(\n                    <Input \n                        prefix={<LockOutlined/>}\n                        size=\"large\"\n                        name=\"password\" \n                        type=\"password\" \n                        placeholder=\"Password\"  />                        \n                )}\n                </FormItem>\n                <FormItem>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\" className=\"login-form-button\">Login</Button>\n                    Or <Link to=\"/signup\">Register now!</Link>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\nexport default Login;","import React, { Component } from 'react';\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../../utils/APIClient';\nimport './signup.css';\nimport { Link } from 'react-router-dom';\nimport { \n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, \n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\n    EMAIL_MAX_LENGTH,\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\n} from '../../constants/Constants';\n\nimport { Form, Input, Button, notification } from 'antd';\nconst FormItem = Form.Item;\n\nclass SignUp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: {\n                value: ''\n            },\n            username: {\n                value: ''\n            },\n            email: {\n                value: ''\n            },\n            password: {\n                value: ''\n            }\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\n        this.isFormInvalid = this.isFormInvalid.bind(this);\n    }\n\n    handleInputChange(event, validationFun) {\n        const target = event.target;\n        const inputName = target.name;        \n        const inputValue = target.value;\n\n        this.setState({\n            [inputName] : {\n                value: inputValue,\n                ...validationFun(inputValue)\n            }\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n    \n        const signupRequest = {\n            name: this.state.name.value,\n            email: this.state.email.value,\n            username: this.state.username.value,\n            password: this.state.password.value\n        };\n        signup(signupRequest)\n        .then(response => {\n            notification.success({\n                message: 'Movierama',\n                description: \"You're successfully registered. Please Login to continue!\",\n            });          \n            this.props.history.push(\"/login\");\n        }).catch(error => {\n            notification.error({\n                message: 'Movierama',\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\n            });\n        });\n    }\n\n    isFormInvalid() {\n        return !(this.state.name.validateStatus === 'success' &&\n            this.state.username.validateStatus === 'success' &&\n            this.state.email.validateStatus === 'success' &&\n            this.state.password.validateStatus === 'success'\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"signup-container\">\n                <h1 className=\"page-title\">Sign Up</h1>\n                <div className=\"signup-content\">\n                    <Form onSubmit={this.handleSubmit} className=\"signup-form\">\n                        <FormItem \n                            label=\"Full Name\"\n                            validateStatus={this.state.name.validateStatus}\n                            help={this.state.name.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"name\"\n                                autoComplete=\"off\"\n                                placeholder=\"Your full name\"\n                                value={this.state.name.value} \n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />    \n                        </FormItem>\n                        <FormItem label=\"Username\"\n                            hasFeedback\n                            validateStatus={this.state.username.validateStatus}\n                            help={this.state.username.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"username\" \n                                autoComplete=\"off\"\n                                placeholder=\"A unique username\"\n                                value={this.state.username.value} \n                                onBlur={this.validateUsernameAvailability}\n                                onChange={(event) => this.handleInputChange(event, this.validateUsername)} />    \n                        </FormItem>\n                        <FormItem \n                            label=\"Email\"\n                            hasFeedback\n                            validateStatus={this.state.email.validateStatus}\n                            help={this.state.email.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"email\" \n                                type=\"email\" \n                                autoComplete=\"off\"\n                                placeholder=\"Your email\"\n                                value={this.state.email.value} \n                                onBlur={this.validateEmailAvailability}\n                                onChange={(event) => this.handleInputChange(event, this.validateEmail)} />    \n                        </FormItem>\n                        <FormItem \n                            label=\"Password\"\n                            validateStatus={this.state.password.validateStatus}\n                            help={this.state.password.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"password\" \n                                type=\"password\"\n                                autoComplete=\"off\"\n                                placeholder=\"A password between 6 to 20 characters\" \n                                value={this.state.password.value} \n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />    \n                        </FormItem>\n                        <FormItem>\n                            <Button type=\"primary\" \n                                htmlType=\"submit\" \n                                size=\"large\" \n                                className=\"signup-form-button\"\n                                disabled={this.isFormInvalid()}>Sign up</Button>\n                            Already registed? <Link to=\"/login\">Login now!</Link>\n                        </FormItem>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n\n    // Validation Functions\n\n    validateName = (name) => {\n        if(name.length < NAME_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\n            }\n        } else if (name.length > NAME_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null,\n              };            \n        }\n    }\n\n    validateEmail = (email) => {\n        if(!email) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Email may not be empty'                \n            }\n        }\n\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n        if(!EMAIL_REGEX.test(email)) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Email not valid'\n            }\n        }\n\n        if(email.length > EMAIL_MAX_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\n            }\n        }\n\n        return {\n            validateStatus: null,\n            errorMsg: null\n        }\n    }\n\n    validateUsername = (username) => {\n        if(username.length < USERNAME_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\n            }\n        } else if (username.length > USERNAME_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: null,\n                errorMsg: null\n            }\n        }\n    }\n\n    validatePassword = (password) => {\n        if(password.length < PASSWORD_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\n            }\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null,\n            };            \n        }\n    }\n\n    validateUsernameAvailability() {\n        // First check for client side errors in username\n        const usernameValue = this.state.username.value;\n        const usernameValidation = this.validateUsername(usernameValue);\n\n        if(usernameValidation.validateStatus === 'error') {\n            this.setState({\n                username: {\n                    value: usernameValue,\n                    ...usernameValidation\n                }\n            });\n            return;\n        }\n\n        this.setState({\n            username: {\n                value: usernameValue,\n                validateStatus: 'validating',\n                errorMsg: null\n            }\n        });\n\n        checkUsernameAvailability(usernameValue)\n        .then(response => {\n            if(response.available) {\n                this.setState({\n                    username: {\n                        value: usernameValue,\n                        validateStatus: 'success',\n                        errorMsg: null\n                    }\n                });\n            } else {\n                this.setState({\n                    username: {\n                        value: usernameValue,\n                        validateStatus: 'error',\n                        errorMsg: 'This username is already taken'\n                    }\n                });\n            }\n        }).catch(error => {\n            // Marking validateStatus as success, Form will be recchecked at server\n            this.setState({\n                username: {\n                    value: usernameValue,\n                    validateStatus: 'success',\n                    errorMsg: null\n                }\n            });\n        });\n    }\n\n    validateEmailAvailability() {\n        // First check for client side errors in email\n        const emailValue = this.state.email.value;\n        const emailValidation = this.validateEmail(emailValue);\n\n        if(emailValidation.validateStatus === 'error') {\n            this.setState({\n                email: {\n                    value: emailValue,\n                    ...emailValidation\n                }\n            });    \n            return;\n        }\n\n        this.setState({\n            email: {\n                value: emailValue,\n                validateStatus: 'validating',\n                errorMsg: null\n            }\n        });\n\n        checkEmailAvailability(emailValue)\n        .then(response => {\n            if(response.available) {\n                this.setState({\n                    email: {\n                        value: emailValue,\n                        validateStatus: 'success',\n                        errorMsg: null\n                    }\n                });\n            } else {\n                this.setState({\n                    email: {\n                        value: emailValue,\n                        validateStatus: 'error',\n                        errorMsg: 'This Email is already registered'\n                    }\n                });\n            }\n        }).catch(error => {\n            // Marking validateStatus as success, Form will be recchecked at server\n            this.setState({\n                email: {\n                    value: emailValue,\n                    validateStatus: 'success',\n                    errorMsg: null\n                }\n            });\n        });\n    }\n}\n\nexport default SignUp;","import React, { Component } from 'react';\nimport './NotFound.css';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'antd';\nimport { NOT_FOUND_PAGE_MESSAGE, NOT_FOUND_PAGE_CODE } from '../constants/Constants';\n\nclass NotFound extends Component {\n    render() {\n        return (\n            <div className=\"page-not-found\">\n                <h1 className=\"title\">\n                    {NOT_FOUND_PAGE_CODE}\n                </h1>\n                <div className=\"desc\">\n                    {NOT_FOUND_PAGE_MESSAGE}\n                </div>\n                <Link to=\"/\"><Button className=\"go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\n            </div>\n        );\n    }\n}\n\nexport default NotFound;","import React, { Component } from 'react';\nimport './ServerError.css';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'antd';\nimport { SERVER_ERROR_PAGE_MESSAGE, SERVER_ERROR_PAGE_CODE } from '../constants/Constants';\n\nclass ServerError extends Component {\n    render() {\n        return (\n            <div className=\"server-error-page\">\n                <h1 className=\"server-error-title\">\n                    {SERVER_ERROR_PAGE_CODE} \n                </h1>\n                <div className=\"server-error-desc\">\n                    {SERVER_ERROR_PAGE_MESSAGE}                \n                </div>\n                <Link to=\"/\"><Button className=\"server-error-go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\n            </div>\n        );\n    }\n}\n\nexport default ServerError;","import React, { Component } from 'react';\nimport MovieList from '../../movie/MovieList';\nimport { getUserProfile } from '../../utils/APIClient';\nimport { Avatar, Tabs, notification } from 'antd';\nimport { getAvatarColor } from '../../utils/Colors';\nimport LoadIndicator  from '../../common/LoadIndicator';\nimport './profile.css';\nimport NotFound from '../../common/NotFound';\nimport ServerError from '../../common/ServerError';\nimport { withRouter } from 'react-router-dom';\n\nconst TabPane = Tabs.TabPane;\n\nclass Profile extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: null,\n            isLoading: false\n        }\n        this.loadUserProfile = this.loadUserProfile.bind(this);\n        this.handleTotalMovieOpinions = this.handleTotalMovieOpinions.bind(this);\n    }\n\n    loadUserProfile(username) {\n        this.setState({\n            isLoading: true\n        });\n\n        getUserProfile(username)\n        .then(response => {\n            this.setState({\n                user: response,\n                isLoading: false\n            });\n        }).catch(error => {\n            if(error.status === 404) {\n                this.setState({\n                    notFound: true,\n                    isLoading: false\n                });\n            } else if(error.status === 401){\n                this.props.history.push(\"/login\");\n                notification.info({\n                    message: 'Movierama',\n                    description: \"Please login to see the details\",          \n                });      \n            } \n            else {\n                this.setState({\n                    serverError: true,\n                    isLoading: false\n                });        \n            }\n        });        \n    }\n      \n    componentDidMount() {\n        const username = this.props.match.params.username;\n        this.loadUserProfile(username);\n    }\n\n    componentDidUpdate(nextProps) {\n        if(this.props.match.params.username !== nextProps.match.params.username) {\n            console.log(\"componentDidupdate laod nextProps.match.params.username\")\n            this.loadUserProfile(this.props.match.params.username);\n        }        \n    }\n\n    handleTotalMovieOpinions = (data) => {\n        if(data === this.state.user.name){\n            var userValue = {...this.state.user}\n            userValue.totalMovieOpinions = userValue.totalMovieOpinions - 1;\n            this.setState({\n                user: userValue\n            });\n        }\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return <LoadIndicator />;\n        }\n\n        if(this.state.notFound) {\n            return <NotFound />;\n        }\n\n        if(this.state.serverError) {\n            return <ServerError />;\n        }\n\n        const tabBarStyle = {\n            textAlign: 'center'\n        };\n\n        return (\n            <div className=\"profile\">\n                { \n                    this.state.user ? (\n                        <div className=\"user-profile\">\n                            <div className=\"user-details\">\n                                <div className=\"user-avatar\">\n                                    <Avatar className=\"user-avatar-circle\" style={{ backgroundColor: getAvatarColor(this.state.user.name)}}>\n                                        {this.state.user.name[0].toUpperCase()}\n                                    </Avatar>\n                                </div>\n                                <div className=\"user-summary\">\n                                    <div className=\"full-name\">{this.state.user.name}</div>\n                                    <div className=\"username\">@{this.state.user.username}</div>\n                                </div>\n                            </div>\n                            <div className=\"user-movie-details\">    \n                                <Tabs defaultActiveKey=\"1\" \n                                    animated={false}\n                                    tabBarStyle={tabBarStyle}\n                                    size=\"large\"\n                                    className=\"profile-tabs\">\n                                    <TabPane tab={`${this.state.user.totalCreatedMovies}  Movies`} key=\"1\">\n                                        <MovieList isAuthenticated={this.props.isAuthenticated} currentUser={this.props.currentUser} username={this.props.match.params.username} type=\"USER_CREATED_MOVIES\" isProfileMovieList={true} handleTotalMovieOpinions={this.handleTotalMovieOpinions}/>\n                                    </TabPane>\n                                    <TabPane tab={`${this.state.user.totalMovieOpinions} Opinions`}  key=\"2\">\n                                        <MovieList isAuthenticated={this.props.isAuthenticated} currentUser={this.props.currentUser} username={this.props.match.params.username} type=\"USER_OPINIONS\" isProfileMovieList={true} handleTotalMovieOpinions={this.handleTotalMovieOpinions}/>\n                                    </TabPane>\n                                </Tabs>\n                            </div>  \n                        </div>  \n                    ): null               \n                }\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Profile);","import React, { Component } from 'react';\nimport {\n    Link,\n    withRouter\n} from 'react-router-dom';\nimport './AppHeader.css';\nimport { Layout, Menu, Dropdown } from 'antd';\nimport {PlusCircleFilled, HomeFilled, UserOutlined, DownOutlined} from '@ant-design/icons';\nconst Header = Layout.Header;\n    \nclass AppHeader extends Component {\n    constructor(props) {\n        super(props);   \n        this.handleMenuClick = this.handleMenuClick.bind(this);   \n    }\n\n    handleMenuClick({ key }) {\n      if(key === \"logout\") {\n        this.props.onLogout();\n      }\n    }\n\n    render() {\n        let menuItems;\n        if(this.props.currentUser) {\n          menuItems = [\n\n            <Menu.Item key=\"/movies/new\">\n              <Link to=\"/movies/new\">\n                  <PlusCircleFilled className=\"nav-icon\" />\n              </Link>\n            </Menu.Item>,\n\n            <Menu.Item key=\"/\">\n              <Link to=\"/\">\n                <HomeFilled className=\"nav-icon\" />\n              </Link>\n            </Menu.Item>,\n\n            <Menu.Item key=\"/profile\" className=\"profile-menu\">\n                <ProfileDropdownMenu \n                  currentUser={this.props.currentUser} \n                  handleMenuClick={this.handleMenuClick}/>\n            </Menu.Item>\n          ]; \n        } else {\n          menuItems = [\n            <Menu.Item key=\"/login\">\n              <Link to=\"/login\">Login</Link>\n            </Menu.Item>,\n            <Menu.Item key=\"/signup\">\n              <Link to=\"/signup\">Signup</Link>\n            </Menu.Item>                  \n          ];\n        }\n\n        return (\n            <Header className=\"app-header\">\n            <div className=\"container\">\n              <div className=\"app-title\" >\n                <Link to=\"/\">Movierama</Link>\n              </div>\n              <Menu\n                className=\"app-menu\"\n                mode=\"horizontal\"\n                selectedKeys={[this.props.location.pathname]}\n                style={{ lineHeight: '64px' }} >\n                  {menuItems}\n              </Menu>\n            </div>\n          </Header>\n        );\n    }\n}\n\nfunction ProfileDropdownMenu(props) {\n  const dropdownMenu = (\n    <Menu onClick={props.handleMenuClick} className=\"profile-dropdown-menu\">\n      <Menu.Item key=\"user-info\" className=\"dropdown-item\" disabled>\n        <div className=\"user-full-name-info\">\n          {props.currentUser.name}\n        </div>\n        <div className=\"username-info\">\n          @{props.currentUser.username}\n        </div>\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"profile\" className=\"dropdown-item\">\n        <Link to={`/users/${props.currentUser.username}`}>Profile</Link>\n      </Menu.Item>\n      <Menu.Item key=\"logout\" className=\"dropdown-item\">\n        Logout\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <Dropdown \n      overlay={dropdownMenu} \n      trigger={['click']}\n      getPopupContainer = { () => document.getElementsByClassName('profile-menu')[0]}>\n      <a className=\"ant-dropdown-link\">\n         <UserOutlined className=\"nav-icon\" style={{marginRight: 0}} /> <DownOutlined />\n      </a>\n    </Dropdown>\n  );\n}\n\n\nexport default withRouter(AppHeader);","import React from 'react';\nimport {\n    Route,\n    Redirect\n  } from \"react-router-dom\";\n  \n  \nconst PrivateRoute = ({ component: Component, authenticated, ...rest }) => (\n    <Route\n      {...rest}\n      render={props =>\n        authenticated ? (\n          <Component {...rest} {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/login',\n              state: { from: props.location }\n            }}\n          />\n        )\n      }\n    />\n);\n  \nexport default PrivateRoute","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  Route,\n  withRouter,\n  Switch\n} from 'react-router-dom';\n\nimport { getCurrentUser } from './utils/APIClient';\nimport { ACCESS_TOKEN,APPLICATION_NAME, SUCCESSFULL_LOGIN, SUCCESSFULL_LOGOUT} from './constants/Constants';\n\nimport MovieList from './movie/MovieList'\nimport NewMovie from './movie/NewMovie'\nimport Login from './user/login/Login';\nimport Signup from './user/signup/SignUp';\nimport Profile from './user/profile/Profile';\nimport AppHeader from './common/AppHeader';\nimport NotFound from './common/NotFound';\nimport LoadIndicator from './common/LoadIndicator';\nimport PrivateRoute from './common/PrivateRoute';\n\nimport { Layout, notification } from 'antd';\nconst { Content } = Layout;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      isAuthenticated: false,\n      isLoading: false\n    }\n    this.handleLogout = this.handleLogout.bind(this);\n    this.loadCurrentUser = this.loadCurrentUser.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n\n    notification.config({\n      placement: 'topRight',\n      top: 70,\n      duration: 3,\n    });    \n  }\n\n  loadCurrentUser() {\n    this.setState({\n      isLoading: true\n    });\n    getCurrentUser()\n    .then(response => {\n      this.setState({\n        currentUser: response,\n        isAuthenticated: true,\n        isLoading: false\n      });\n    }).catch(error => {\n      this.setState({\n        isLoading: false\n      });  \n    });\n  }\n\n  componentDidMount() {\n    this.loadCurrentUser();\n  }\n\n  handleLogout(redirectTo=\"/\", notificationType=\"success\", description=SUCCESSFULL_LOGOUT) {\n    localStorage.removeItem(ACCESS_TOKEN);\n\n    this.setState({\n      currentUser: null,\n      isAuthenticated: false\n    });\n\n    this.props.history.push(redirectTo);\n    \n    notification[notificationType]({\n      message: APPLICATION_NAME,\n      description: description,\n    });\n  }\n\n  handleLogin() {\n    notification.success({\n      message: APPLICATION_NAME,\n      description: SUCCESSFULL_LOGIN,\n    });\n    this.loadCurrentUser();\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    if(this.state.isLoading) {\n      return <LoadIndicator />\n    }\n    \n    return (\n        <Layout className=\"app-container\">\n          <AppHeader isAuthenticated={this.state.isAuthenticated} \n            currentUser={this.state.currentUser} \n            onLogout={this.handleLogout} />\n\n          <Content className=\"app-content\">\n            <div className=\"container\">\n              <Switch>      \n                <Route exact path=\"/\" \n                  render={(props) => <MovieList isAuthenticated={this.state.isAuthenticated} \n                      currentUser={this.state.currentUser} handleLogout={this.handleLogout} isProfileMovieList={false} {...props}/>}>\n                </Route>\n                <Route path=\"/login\" \n                  render={(props) => <Login onLogin={this.handleLogin} {...props} />}></Route>\n                <Route path=\"/signup\" component={Signup}></Route>\n                <Route path=\"/users/:username\" \n                  render={(props) => <Profile isAuthenticated={this.state.isAuthenticated} currentUser={this.state.currentUser} {...props}  />}>\n                </Route>\n                <PrivateRoute authenticated={this.state.isAuthenticated} path=\"/movies/new\" component={NewMovie} handleLogout={this.handleLogout} currentUser={this.state.currentUser}></PrivateRoute>\n                <Route component={NotFound}></Route>\n              </Switch>\n            </div>\n          </Content>\n        </Layout>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}